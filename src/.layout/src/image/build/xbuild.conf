####################
#
# Base Configuration
#

# This Package will installed before xbuild is running and its needed by xbuild itself
#
# default = apt-utils lsb-release software-properties-common psmisc wget curl dirmngr command-not-found
core_packages=apt-utils lsb-release software-properties-common psmisc wget curl dirmngr command-not-found

# This Package will installed by apt during xbuild is running. This could used to install your own Packages,
# e.g. nginx, mariadb a.s.o.
#
# default =
core_custom_packages=

# If you want to use an custom Mirror create the file sources.list in this Folder and fill it with your Mirrors
# In this case you have to set this Property to Y
#
# default = N
core_custom_mirror_enabled=N

# Disable Logfile. If Log is disabled all output goes to console instead of Logfile
# This concerns to xbuild Log Output. s6 Log Output can configured in the s6 Configuration
# Section, below in this Config File
#
# default = N
core_log_disabled=N

# Define the Log Format for socklog Logging
# (empty) - do not insert timestamps into logs
# T - prepend every line with an ISO 8601 timestamp
# t - prepend every line with a TAI64N timestamp
#
# default =
core_log_timestamp_format=

####################
#
# Runtime Configuration
#

# This will install additional DotNet Core Runtime
#
# default = N
runtime_dotnet_enabled=N

# This will install additional DotNet Core in given Version
# Possible Values are 1.0, 1.1, 2.0, 2.1, 2.2 or 3.0
#
# default = 2.2
runtime_dotnet_version=2.2

# This will install additional PowerShell Core
#
# default = N
runtime_pwsh_enabled=N

# This will install additional NodeJS Runtime and the yarn Package Manager
#
# default = N
runtime_node_enabled=N

# This will install additional NodeJS in given Version
# Possible Values are 8, 9, 10, 11, 12
#
# default = 12
runtime_node_version=12

####################
#
# Development Configuration
#

# This will install additional Development Tools. This Tools will you
# needed to develop your Use Case. After you finish your Development
# this Tools will be removed later when Cleanup is running. If DotNet
# is activated (see above) the DotNet Core SDK will also installed.
#
# default = N
dev_enabled=N

# This will install additional Development Packages by apt
#
# default = bats shellcheck git openssh-client procps net-tools dnsutils inetutils-ping nmap
dev_packages=bats shellcheck git openssh-client procps net-tools dnsutils inetutils-ping nmap

# This will install globally additional Node Development Tools by npm
#
# default = typescript ts-node mocha chai appversion-mgr
dev_node_packages=typescript ts-node mocha chai appversion-mgr

####################
#
# Cleanup Configuration
#

# Cleanup the Image after an Build
#
# default = Y
cleanup_enabled=Y

# This Packages should also removed when the Image will cleaned
#
# default = mime-support apt-file gnupg apt-transport-https aptitude
cleanup_packages=mime-support apt-file gnupg apt-transport-https aptitude

####################
#
# Hardening Configuration
#

# Should the Image hardened after an build
#
# default = Y
harden_enabled=Y

# The following Packages should remove because the have know CVEs

# This Packages should removed when the Image will hardened
#
# default = readline-common python3.5-minimal lsb-base
harden_packages=readline-common python3.5-minimal lsb-base

# This Libraries should removed when the Image will hardened
#
# default = libpython3.5-minimal libgssapi-krb5-2 libldap-common libglib2.0-0 libsystemd0 libsmartcols1 libuuid1
harden_libraries=libpython3.5-minimal libgssapi-krb5-2 libldap-common libglib2.0-0 libsystemd0 libsmartcols1 libuuid1

# This essential Packages should removed when the Image will hardened
# Be carefull your image could be become instable!!!
# You should know what you do!
#
# default = ncurses-base ncurses-bin login e2fslibs
harden_essential=ncurses-base ncurses-bin login e2fslibs

####################
#
# s6 Configuration
#
# see also https://github.com/just-containers/s6-overlay for further Details
#

# If set, then environment is not reset and whole supervision tree sees original set of env vars.
# It switches with-contenv into noop.
#
# default = 0
s6_keep_env=0

# Logging Configuration
#
# Values:
# 0 = Outputs everything to stdout/stderr.
# 1 = Uses an internal catch-all logger and persists everything on it, it is located in
#     /var/log/s6-uncaught-logs. Anything run as a CMD is still output to stdout/stderr.
# 2 = Uses an internal catch-all logger and persists everything on it, including the output
#     of CMD. Absolutely nothing is written to stdout/stderr.
#
# default = 0
s6_logging=0

# What should done if Stage 2 fails
#
# Values:
# 0 = Continue silently even if any script (fix-attrs or cont-init) has failed.
# 1 = Continue but warn with an annoying error message.
# 2 = Stop by sending a termination signal to the supervision tree.
#
# default = 0
s6_behaviour_if_stage2_fails=0

# The maximum time (in milliseconds) a script in /etc/cont-finish.d could take before sending a
# KILL signal to it. Take into account that this parameter will be used per each script
# execution, it's not a max time for the whole set of scripts.
#
# default = 5000
s6_kill_finish_maxtime=5000

# How long (in milliseconds) s6 should wait services before sending a TERM signal.
#
# default = 3000
s6_services_gracetime=3000

# How long (in milliseconds) s6 should wait to reap zombies before sending a KILL signal.
#
# default = 3000
s6_kill_gracetime=3000

# This env decides what to log and how, by default every line will prepend with ISO8601,
# rotated when the current logging file reaches 1mb and archived, at most, with 20 files.
#
# default = n20 s1000000 T
s6_logging_script=n20 s1000000 T

# Value of this env var will be prepended to any CMD args passed by docker. Use it if
# you are migrting an existing image to a s6-overlay and want to make it a drop-in replacement,
# then setting this variable to a value of previously used ENTRYPOINT will improve compatibility
# with the way image is used.
#
# default =
s6_cmd_arg0=

# Controls how fix-attrs.d scripts process files and directories
#
# Values:
# 0 = Hidden files and directories are excluded.
# 1 = All files and directories are processed.
#
# default = 0
s6_fix_attrs_hidden=0

# In order to proceed executing CMD overlay will wait until services are up. Be aware that up
# doesn't mean ready. Depending if notification-fd was found inside the servicedir overlay will
# use s6-svwait -U or s6-svwait -u as the waiting statement.
#
# default = 0
s6_cmd_wait_for_services=0

# The maximum time (in milliseconds) the services could take to bring up before proceding to CMD executing.
#
# default = 5000
s6_cmd_wait_for_services_maxtime=5000

# When running in a container whose root filesystem is read-only, set this env to 1 to inform init stage 2
# that it should copy user-provided initialization scripts from /etc to /var/run/s6/etc before it attempts
# to change permissions, etc. See Read-Only Root Filesystem for more information.
#
# default = 0
s6_read_only_root=0

# Set this env to 1 to inform init stage 3 that it should attempt to sync filesystems before stopping
# the container. Note: this will likely sync all filesystems on the host.
#
# default = 0
s6_sync_disks=0
